<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="16:9" xml:space="preserve">
    <value>16:9</value>
    <comment>Text for 16:9 crop</comment>
  </data>
  <data name="3:1" xml:space="preserve">
    <value>3:1</value>
    <comment>Text for 3:1</comment>
  </data>
  <data name="3:2" xml:space="preserve">
    <value>3:2</value>
    <comment>Text for 3:2</comment>
  </data>
  <data name="4:3" xml:space="preserve">
    <value>4:3</value>
    <comment>Text for 4:3</comment>
  </data>
  <data name="5:4" xml:space="preserve">
    <value>5:4</value>
    <comment>Text for 5:4</comment>
  </data>
  <data name="7:5" xml:space="preserve">
    <value>7:5</value>
    <comment>Text for 7:5</comment>
  </data>
  <data name="Add text" xml:space="preserve">
    <value>Ajouter du texte</value>
    <comment>Text for add text</comment>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Dos</value>
    <comment>Text for back</comment>
  </data>
  <data name="Blur" xml:space="preserve">
    <value>Se brouiller</value>
    <comment>Text for blur</comment>
  </data>
  <data name="Brightness" xml:space="preserve">
    <value>Luminosité</value>
    <comment>Text for brightness</comment>
  </data>
  <data name="circle" xml:space="preserve">
    <value>cercle</value>
    <comment>Text for circle crop </comment>
  </data>
  <data name="Color" xml:space="preserve">
    <value>Couleur</value>
    <comment>Text for color</comment>
  </data>
  <data name="Contrast" xml:space="preserve">
    <value>Contraste</value>
    <comment>Text for contrast</comment>
  </data>
  <data name="Crop" xml:space="preserve">
    <value>Recadrer</value>
    <comment>Text for crop</comment>
  </data>
  <data name="custom" xml:space="preserve">
    <value>coutume</value>
    <comment>Text for custom crop</comment>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Supprimer</value>
    <comment>Text for delete</comment>
  </data>
  <data name="Effects" xml:space="preserve">
    <value>Effets</value>
    <comment>Text for effects</comment>
  </data>
  <data name="ellipse" xml:space="preserve">
    <value>ellipse1</value>
    <comment>Text for</comment>
  </data>
  <data name="Exposure" xml:space="preserve">
    <value>d'exposition</value>
    <comment>Text for exposure</comment>
  </data>
  <data name="Fill" xml:space="preserve">
    <value>Remplir</value>
    <comment>Text for fill</comment>
  </data>
  <data name="Flip horizontal" xml:space="preserve">
    <value>Retourner horizontalement</value>
    <comment>Text for flip horizontal</comment>
  </data>
  <data name="Flip vertical" xml:space="preserve">
    <value>Retourner verticalement</value>
    <comment>Text for flip vertical</comment>
  </data>
  <data name="Font attributes" xml:space="preserve">
    <value>Attributs de police</value>
    <comment>Text for font attributes</comment>
  </data>
  <data name="Font family" xml:space="preserve">
    <value>Famille de polices</value>
    <comment>Text for font family</comment>
  </data>
  <data name="Font size" xml:space="preserve">
    <value>Taille de police</value>
    <comment>Text for font size</comment>
  </data>
  <data name="Hue" xml:space="preserve">
    <value>Teinte</value>
    <comment>Text for hue</comment>
  </data>
  <data name="Image saved successfully" xml:space="preserve">
    <value>Image enregistrée avec succès</value>
    <comment>Text for image saved successfully</comment>
  </data>
  <data name="Opacity" xml:space="preserve">
    <value>Opacité</value>
    <comment>Text for opacity</comment>
  </data>
  <data name="original" xml:space="preserve">
    <value>originale</value>
    <comment>Text for original crop</comment>
  </data>
  <data name="Pen" xml:space="preserve">
    <value>Stylo</value>
    <comment>Text for pen</comment>
  </data>
  <data name="Redo" xml:space="preserve">
    <value>Refaire</value>
    <comment>Text for reod</comment>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Réinitialiser</value>
    <comment>Text for reset</comment>
  </data>
  <data name="Rotate" xml:space="preserve">
    <value>Tourner</value>
    <comment> Text for rotate</comment>
  </data>
  <data name="Saturation" xml:space="preserve">
    <value>Saturation1</value>
    <comment>Text for saturation</comment>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Sauvegarder</value>
    <comment>Text for save</comment>
  </data>
  <data name="Save edit" xml:space="preserve">
    <value>Enregistrer la modification</value>
    <comment>Text for save edit</comment>
  </data>
  <data name="Shape" xml:space="preserve">
    <value>Forme</value>
    <comment>Text for shape</comment>
  </data>
  <data name="Sharpen" xml:space="preserve">
    <value>Aiguiser</value>
    <comment>Text for sharpen</comment>
  </data>
  <data name="square" xml:space="preserve">
    <value>square</value>
    <comment>Text for square</comment>
  </data>
  <data name="Stroke" xml:space="preserve">
    <value>Accident vasculaire cérébral</value>
    <comment>Text for stroke</comment>
  </data>
  <data name="Stroke thickness" xml:space="preserve">
    <value>Épaisseur du trait</value>
    <comment>Text for stroke thickness</comment>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Texte</value>
    <comment>Text for toolbar text</comment>
  </data>
  <data name="Text alignment" xml:space="preserve">
    <value>Alignement du texte</value>
    <comment>Text for text alignment</comment>
  </data>
  <data name="Text color" xml:space="preserve">
    <value>Couleur du texte</value>
    <comment>Text for text color</comment>
  </data>
  <data name="Undo" xml:space="preserve">
    <value>annuler</value>
    <comment>Text for undo</comment>
  </data>
  <data name="Zoom in" xml:space="preserve">
    <value>Agrandir</value>
    <comment>Text for zoom in</comment>
  </data>
  <data name="Zoom out" xml:space="preserve">
    <value>Dézoomer</value>
    <comment>Text for zoom out</comment>
  </data>
</root>